tsc --watch

CORE DATA TYPES:
1. Number
2. String
3. Boolean
When no value is assigned, then by default a variable has data type "any".
Exmp: let x;
When no data type is declared then by default data type of variable is what we pass for the first time.
Exmp: x = 10;  // data type: number
Exmp: const y = 5; // data type: 5 bcoz can't change
Union Type: When value type is not confirmed:
Exmp: let x:string | number | boolean = 10;
          x = true; // it will work
Exmp: let y:any = "ali"
          y = 10; // it will work.
Literal Type: assigning value instead of type.
Exmp: let data:"abc" | 123 = "abc";

OBJECT:
let user:{ name: string; age: number; isMale: boolean } = {
    name: "John",
    age: 30,
    isMale: true,
};
If have to use again & again then define types at the top:
type objType = { name: string; age: number; isMale: boolean };
let user:objType = {
    name: "John",
    age: 30,
    isMale: true,
};

ARRAY:
When have one type of values:
let data:string[] = ["php", "node", "express", "ruby"];

TUPLE: When have random type of limited values (fixed size & fix types):
let random:[string, string, number, boolean?] = ["usman", "ali", 30]
random.push(true); // it will work.
random[1] = 5; // it will not.
random[1] = "saqib"

When have one of the types but not sure which:
let random:string[] | number[] | boolean[] = ["hi", "hello", "bye"]
let random:string[] | number[] | boolean[] = [1, 2, 3]

When have random type of unlimited values:
let random:any[] = ["usman", 30, true, 12, "ali', false]

ENUM: Group of constants.
Exmp#1:
enum Color {RED, GREEN, BLUE}
console.log(Color.1) // RED
console.log(Color.BLUE) // 2
Exmp#2:
enum roles = {
    ADMIN = "admin",
    GUEST = "guest",
    "USER" = "user"
}
console.log(roles.USER) // user

ANY: by default type or typescript disabled
UNKNOWN: similar to ANY but a little different.
Diff. b/w ANY & UNKNOWN:
let data:any;
data = 15;
let item:string;
item = data; // no error because TS is disabled

let data:unknown;
data = 15;
let item:string;
item = data; // error

Diff. b/w void & never
VOID: For a function who's not returning anything.
Functions: define return type & type of its arguments.
Exmp: function sum(x:number, y:number): number {

}
Type Inference: TS infer the type itself when no type is defined by user.
Type Annotations: Explicitly defining a type


INTERFACE:
Exmp#1:
interface User {
    name: string;
    age: number;
    isMale?: boolean; // optional
}

function getUser(obj: User) {}
getUser({name: "Ali", age: 15, isMale: true})

Exmp#2:
interface Admin extends User {
    isAdmin: boolean;
}
function getAdmin(obj: Admin) {}
getAdmin({name: "Ali", age: 15, isAdmin: true})

TYPE ALIASES: user defined data types
Exmp#1:
type xyz = number | string | null;     // pipe is called Union
let a: xyz; // type of "a" is number | string | null
Exmp#2:
type User = {
    name: string,
    age: number,
}
type Admin = User & {
    getDetails(user: string): void
}

function abcd(a: Admin) {} // now "a" has name, age & getDetails

CLASSES & OBJECTS:
class Bottle {
    constructor(public brand: string, public price: number, public color: string, public material?: string) {
    }
}

let b1 = new Bottle("Milton", 1200, "yellow", "metal"); // material is optional

Public: property declared with public keyword can be accessed/changed inside constructor or inside another method of its class or inside sub classes or by making an object.
Private: cannot be accessed/changed outside the class.
Protected: can be changed only in its class & subclasses.

Read Only: property can be accessed but cannot be changed.
public readonly brand: string

FUNCTIONS:
Function Type: type of value returned by a function.
function myFunc(name: string, gender?: string, cb: (arg: string) => void) {

    cb("Hi..");

}

myFunc("Usman", (arg: string) => {
    console.log(arg) // Hi..
})

REST PARAMETERS:
function myFunc(...arg: number[]) {

}

GENERICS:
Generic Functions:
Exmp#1:
function myFunc<T>(passkey: T, name: string, age: number) {}
myFunc<string>("hello", "Usman", 15)
myFunc<boolean>(true, "Usman", 15)
[OR]
myFunc("hello", "Usman", 15) // inference
myFunc(true, "Usman", 15)

Exmp#2:
function myFunc<T>(a: T, b: T): T {
    return true as T;
    [OR]
    return <T>true;
}

Generic interfaces:
interface User<T> {
    name: string;
    age: number;
    passkey: T;
}

function getUser(obj: User<number>) {}
getUser(name: "Usman", age: 20, passkey: 34567)

function getUser(obj: User<string>) {}
getUser(name: "Usman", age: 20, passkey: "123jgkk")

Generic Classes:
class Bottle<T> {
    constructor(public passkey: T)
}

let b1 = new Bottle<number>(1234)
let b2 = new Bottle<string>("123jgkk")
[OR]
let b1 = new Bottle(1234)
let b2 = new Bottle(1234)


TYPE ASSERTION:
let a: any = 12;
(a as string).toUpperCase();

TYPE GUARDS/TYPE NARROWING:
function myFunc(arg: string | number) {
    if (typeof arg === "string") {
        return string;
    } else if (typeof arg === "number") {
        return number;
    } else return "neither string nor number";
}